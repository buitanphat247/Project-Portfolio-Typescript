import axios from 'axios';
import type { GitHubRepo } from '../types/github.types';
import { config } from '../utils/config';

const GITHUB_API_URL = 'https://api.github.com/user/repos';

export const fetchGitHubRepos = async (): Promise<GitHubRepo[]> => {
  try {
    console.log('üîç ƒêang fetch repositories t·ª´ GitHub...');
    
                    const response = await axios.get(GITHUB_API_URL, {
                  headers: {
                    'Authorization': `token ${config.github.token}`,
                    'Accept': 'application/vnd.github.v3+json'
                  },
      params: {
        sort: 'updated',
        per_page: 100,
        type: 'public'
      }
    });
    
    console.log('response: ', response);
    
    const data: GitHubRepo[] = response.data;
    console.log('üìä T·ªïng repositories nh·∫≠n ƒë∆∞·ª£c:', data.length);
    console.log('üìã Danh s√°ch repositories:', data.map(repo => repo.name));
    
    // Kh√¥ng l·ªçc g√¨ c·∫£ - hi·ªÉn th·ªã t·∫•t c·∫£ repositories
    console.log('‚úÖ Kh√¥ng l·ªçc - gi·ªØ nguy√™n t·∫•t c·∫£ repositories:', data.length);
    
    // S·∫Øp x·∫øp theo ng√†y c·∫≠p nh·∫≠t m·ªõi nh·∫•t
    const sortedRepos = data.sort((a, b) => 
      new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()
    );
    
    console.log('üéØ ƒê√£ s·∫Øp x·∫øp repositories:', sortedRepos.length);
    
    return sortedRepos;
    
  } catch (err) {
    console.error('‚ùå L·ªói khi fetch repositories:', err);
    
    if (axios.isAxiosError(err)) {
      if (err.response?.status === 401) {
        throw new Error('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      } else if (err.response?.status === 403) {
        throw new Error('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p repositories');
      } else {
        throw new Error(`GitHub API Error: ${err.response?.status} ${err.response?.statusText}`);
      }
    } else {
      throw new Error('C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi GitHub');
    }
  }
};
